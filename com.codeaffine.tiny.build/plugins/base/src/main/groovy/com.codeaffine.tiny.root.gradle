plugins {
    id("pl.allegro.tech.build.axion-release")
}

// versioning and release management
scmVersion {
    tag {
        prefix = 'v'
    }
    releaseBranchNames = ['main']
    repository {
        pushTagsOnly = true // needed for CI/CD trigger
    }
}

project.version = scmVersion.version

// Configure the ':tasks' task of the root project to only show
// the main lifecycle tasks as entry points to the build
ext.mainBuildGroup = "main build"

tasks.named("tasks") {
    displayGroup = mainBuildGroup
}

tasks.register("build") {
    group = mainBuildGroup
    description = "Complete build of all modules and the application"
    dependsOn(subprojects.collect { ":${it.name}:$name" })
}

tasks.register("clean") {
    group = mainBuildGroup
    description = "Run clean of all modules and the application"
    dependsOn(subprojects.collect { ":${it.name}:$name" })
}

tasks.register("javadoc") {
    group = mainBuildGroup
    description = "Run javadoc of all modules and the application"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("javadocJar") {
    group = mainBuildGroup
    description = "Run javadocJar of all modules and the application"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("testFixturesJavadoc") {
    group = mainBuildGroup
    description = "Run javadoc for test fixtures of all related modules"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("testFixturesJavadocJar") {
    group = mainBuildGroup
    description = "Run javadocJar for test fixtures of all related modules"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("recommendModuleVersions") {
    group = mainBuildGroup
    description = "Run recommendModuleVersions of all modules and the application"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("moduleDependencies") {
    group = mainBuildGroup
    description = "Run moduleDependencies of all modules and the application"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("publish") {
    group = mainBuildGroup
    description = "Run publish of all modules"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("releaseMajor") {
    group = mainBuildGroup
    description = "Release new major version and push to remote"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("releaseMinor") {
    group = mainBuildGroup
    description = "Release new minor version and push to remote"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}

tasks.register("releasePatch") {
    group = mainBuildGroup
    description = "Release new patch version and push to remote"
    dependsOn(subprojects.collect { subproject ->
        subproject.tasks.findByName(name) ? ":${subproject.name}:$name" : null
    }.findAll { it != null })
}
