plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version '1.8.12' apply true
    id "io.freefair.lombok" version "6.5.1"
    id 'maven-publish'
    id "org.sonarqube" version "3.5.0.2730"
}

group 'com.codeaffine.tiny'
version '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    modularity.inferModulePath.set(false)
}

repositories {
    mavenCentral()
}

configurations {
    tomcatSources
    tomcatResources
}

dependencies {
    tomcatSources 'org.apache.tomcat.embed:tomcat-embed-core:10.1.1:sources'
    tomcatResources 'org.apache.tomcat.embed:tomcat-embed-core:10.1.1'

    implementation(
            'jakarta.servlet:jakarta.servlet-api:6.0.0',
            'jakarta.annotation:jakarta.annotation-api:2.1.1',
            'jakarta.ejb:jakarta.ejb-api:4.0.1',
            'jakarta.mail:jakarta.mail-api:2.1.1',
            'jakarta.persistence:jakarta.persistence-api:3.1.0',
            'jakarta.xml.rpc:jakarta.xml.rpc-api:1.1.4',
            'jakarta.xml.ws:jakarta.xml.ws-api:4.0.0',
            'wsdl4j:wsdl4j:1.6.3',
            'org.apache.tomcat:jakartaee-migration:1.0.6',
            project(':com.codeaffine.tiny.star.tomcat.bnd.dummy')
    )
}

clean {
    delete "${project.getProjectDir()}/src/main/java/jakarta/"
    delete "${project.getProjectDir()}/src/main/java/org/"
    delete "${project.getProjectDir()}/src/main/resources/"
}

task extractTomcatSources(type: Copy) {
    duplicatesStrategy = 'exclude'
    def javaDir = "${project.getProjectDir()}/src/main/java/"
    configurations.tomcatSources.asFileTree.each {
        from(zipTree(it)) {
            include('/**/*.java')
            exclude(
                'jakarta/servlet/**',
                'module-info.java',
                'META-INF/**',
                '/**/*.class')
            filter {
                String line -> line.replaceAll(
                        "import org\\.apache\\.tomcat\\.jakartaee\\.EESpecProfile;",
                        "import org.apache.tomcat.jakartaee.EESpecProfile; import org.apache.tomcat.jakartaee.EESpecProfiles;")
            }
            filter{
                String line -> line.replaceAll("EESpecProfile\\.valueOf", "EESpecProfiles.valueOf")
            }
        }
    }
    into file(javaDir)
}

task extractTomcatResources(type: Copy) {
    duplicatesStrategy = 'exclude'
    configurations.tomcatResources.asFileTree.each {
        from(zipTree(it)) {
            include('META-INF/**')
            exclude('META-INF/MANIFEST.MF')
        }
    }
    into file("${project.getProjectDir()}/src/main/resources/")
    configurations.tomcatSources.asFileTree.each {
        from(zipTree(it)) {
            exclude(
                'jakarta/servlet/**',
                '/**/*.java',
                '/**/*.class')
        }
    }
    into file("${project.getProjectDir()}/src/main/resources/")
}

project.afterEvaluate {
    generateEffectiveLombokConfig.dependsOn(extractTomcatSources)
    processResources.dependsOn(extractTomcatResources)
    compileJava.dependsOn(extractTomcatSources)
}

publishing {
    publications {
        tinyStarTomcatEmbedCore(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "tiny"
            url = uri("https://maven.pkg.github.com/fappel/tiny")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "fappel_tiny"
        property "sonar.organization", "code-affine"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
