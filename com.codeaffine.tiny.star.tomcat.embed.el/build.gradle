plugins {
    id 'tiny.java.common'
    id 'org.javamodularity.moduleplugin' version '1.8.12' apply true
    id 'tiny.publish.common'
}

configurations {
    tomcatSources
    tomcatResources
}

dependencies {
    tomcatSources 'org.apache.tomcat.embed:tomcat-embed-el:10.1.1:sources'
    tomcatResources 'org.apache.tomcat.embed:tomcat-embed-el:10.1.1'

    implementation(
        'jakarta.el:jakarta.el-api:5.0.1',
        project(':com.codeaffine.tiny.star.tomcat.bnd.dummy')
    )
}

clean {
    delete "${project.getProjectDir()}/src/main/java/org/"
    delete "${project.getProjectDir()}/src/main/resources/"
}

task extractTomcatSources(type: Copy) {
    duplicatesStrategy = 'exclude'
    def javaDir = "${project.getProjectDir()}/src/main/java/"
    configurations.tomcatSources.asFileTree.each {
        from(zipTree(it)) {
            exclude('jakarta/**', 'module-info.java', 'META-INF/**', '/**/*.class')
        }
    }
    into file(javaDir)
}

task extractTomcatResources(type: Copy) {
    duplicatesStrategy = 'exclude'
    configurations.tomcatResources.asFileTree.each {
        from(zipTree(it)) {
            include('META-INF/**')
            exclude('META-INF/MANIFEST.MF')
        }
    }
    into file("${project.getProjectDir()}/src/main/resources/")
}

project.afterEvaluate {
    generateEffectiveLombokConfig.dependsOn(extractTomcatSources)
    processResources.dependsOn(extractTomcatResources)
    compileJava.dependsOn(extractTomcatSources)
}

publishing {
    publications {
        tinyStarTomcatEmbedEl(MavenPublication) {
            from components.java
        }
    }
}
